#!/usr/bin/env bash
## Init status draw
printf '\n';
set -eu
cgroup_dir="/sys/fs/cgroup";
# cache_result_file="/tmp/.wsload";
# if test -e "$cache_result_file"; then {
# 	printf '%s\n' "$(< "$cache_result_file")";
# } else {
# 	touch "$cache_result_file";
# } fi

# (
	function get_time() {
		date +%s%N;
	}

	function get_cpu_reading() {
		awk '{
			if (NR==1) user=$2;
			else if (NR==3) {sys=$2; print user + sys};
		}' "$cgroup_dir/cpu.stat";
	}

	function get_memory_reading() {
		# grep -Eo '[0-9]+' memory.stat | numfmt --to iec --format "%8.4f"  | nl | grep -E 'G|M' | column && gp top
		# numfmt --to iec --format "%8.4f" < "$cgroup_dir/memory.current";
		awk '{
			if (NR==15) usr=$2; else if (NR==17) {sys=$2; print usr + sys; exit};
		}' "$cgroup_dir/memory.stat" | numfmt --to iec --format "%8.2f"
	}

	while true; do {
		status_string=();
		## CPU
		start_time="$(get_time)";
		start_cpu_read="$(get_cpu_reading)";
		# echo "$start_time:$start_cpu_read"
		sleep 1.5;
		end_time="$(get_time)";
		end_cpu_read="$(get_cpu_reading)";
		# echo "$end_time:$end_cpu_read"
		percentage="$(bc -l <<<"( ($end_cpu_read - $start_cpu_read) / ($end_time - $start_time) ) * 1000")" && percentage="${percentage/./0.}";
		status_string+=("#[bg=#ffb86c,fg=#282a36,bold] CPU: ${percentage:0:4}%");

		## Memory
		sleep 1;
		status_string+=("#[bg=#8be9fd,fg=#282a36,bold] MEM:$(get_memory_reading) ");
		printf '%s\n' "${status_string[*]}"
	} done

# ) & disown